# Реализуйте функцию compare_version(), которая сравнивает переданные версии version1 и version2. Если version1 > version2, то функция должна вернуть 1, если version1 < version2, то -1, если же version1 = version2 — 0.

# Версия — это строка, в которой два числа (мажорная и минорные версии) разделены точкой, например: 12.11. Важно понимать, что версия — это не число с плавающей точкой, а несколько чисел не связанных между собой. Проверка на больше/меньше производится сравнением каждого числа независимо. Поэтому версия 0.12 больше версии 0.2.

# Пример порядка версий:

# 0.1 < 1.1 < 1.2 < 1.11 < 13.37
# compare_version("0.1", "0.2")  # -1
# compare_version("0.2", "0.1")  # 1
# compare_version("4.2", "4.2")  # 0
# Подробнее о версиях: http://semver.org/lang/ru/

# Подсказки
# Разобрать строку на части, разделённые некоторой подстрокой, можно так:

# 'foo::bar::baz'.split('::')  # ['foo', 'bar', 'baz']

def compare_version(version1, version2):
    # Разделяем строки на части, используя точку как разделитель
    parts1 = version1.split('.')
    parts2 = version2.split('.')
    
    # Находим максимальную длину среди двух версий, чтобы избежать ошибки индекса
    max_len = max(len(parts1), len(parts2))
    
    for i in range(max_len):
        # Если первая версия имеет меньше частей, считаем её версией 0 в этой позиции
        part1 = float(parts1[i]) if i < len(parts1) else 0
        # Если вторая версия имеет меньше частей, считаем её версией 0 в этой позиции
        part2 = float(parts2[i]) if i < len(parts2) else 0
        
        # Сравниваем части версий
        if part1 < part2:
            return -1
        elif part1 > part2:
            return 1
    
    # Если дошли до этой точки, версии равны
    return 0

# Примеры использования:
print(compare_version("0.1", "0.2"))  # -1
print(compare_version("0.2", "0.1"))  # 1
print(compare_version("4.2", "4.2"))  # 0
